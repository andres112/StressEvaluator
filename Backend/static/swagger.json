{
  "openapi": "3.0.0",
  "info": {
    "description": "Stressor Test Platform for create and execute test for stress evalutions.",
    "version": "1.0.0",
    "title": "Stressor Test Platform API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Test",
      "description": "Endpoints related to the Test."
    },
    {
      "name": "Step",
      "description": "Endpoints related to the steps included into a specific Test."
    },
    {
      "name": "Implementation",
      "description": "Endpoints used in test implementation stage."
    },
    {
      "name": "Result",
      "description": "Endpoints related to results obtained of test implementation."
    }
  ],
  "paths": {
    "/find_test": {
      "get": {
        "tags": ["Test"],
        "summary": "Find all tests according searching parameters",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Test name",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "owner",
            "in": "query",
            "description": "Test owner",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    },
    "/test": {
      "post": {
        "tags": ["Test"],
        "summary": "Create a new test",
        "requestBody": {
          "description": "New test configuration",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Test"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Test created successfully"
          },
          "400": {
            "description": "Failed. Bad request data."
          }
        }
      }
    },
    "/test/{test_id}": {
      "get": {
        "tags": ["Test", "Implementation"],
        "summary": "Find a test by ID",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Resource not found."
          }
        }
      },
      "put": {
        "tags": ["Test"],
        "summary": "Update some details of test",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Update test configuration",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Test"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad request."
          },
          "404": {
            "description": "Resource not found."
          }
        }
      },
      "delete": {
        "tags": ["Test"],
        "summary": "Remove a test by ID",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    },
    "/test/{test_id}/step": {
      "get": {
        "tags": ["Step"],
        "summary": "Find all steps from a test by test ID",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Resource not found."
          }
        }
      },
      "post": {
        "tags": ["Step"],
        "summary": "Add new steps to the test",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "New step configuration",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Step"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad request"
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    },
    "/test/{test_id}/step/{step_id}": {
      "get": {
        "tags": ["Step", "Implementation"],
        "summary": "Find a step from a test by step ID",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "step_id",
            "in": "path",
            "description": "Step id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Resource not found."
          }
        }
      },
      "put": {
        "tags": ["Step"],
        "summary": "Update existent step in test",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "step_id",
            "in": "path",
            "description": "Step id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Update step configuration",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Step"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad request."
          },
          "404": {
            "description": "Resource not found."
          }
        }
      },
      "delete": {
        "tags": ["Step"],
        "summary": "Remove existent step in test",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "step_id",
            "in": "path",
            "description": "Step id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    },
    "/test_results/{test_id}": {
      "get": {
        "tags": ["Result"],
        "summary": "Get responses from a test by ID",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "full_data",
            "in": "query",
            "description": "Complete user session data",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    },
    "/create_session/{test_id}": {
      "post": {
        "tags": ["Implementation"],
        "summary": "Create the user session for test implementation",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Session creation schema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad request"
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    },
    "/send_step/{test_id}/session/{session_id}": {
      "post": {
        "tags": ["Implementation"],
        "summary": "Send the answer to questionnaires or stressors from user",
        "parameters": [
          {
            "name": "test_id",
            "in": "path",
            "description": "Test id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "Session id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "Step answers",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session_Step"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Test created successfully"
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Test": {
        "type": "object",
        "required": ["name", "description"],
        "properties": {
          "test_id": {
            "type": "string",
            "format": "string"
          },
          "name": {
            "type": "string",
            "format": "string",
            "example": "Test name"
          },
          "owner": {
            "type": "string",
            "format": "string",
            "example": "Test owner"
          },
          "description": {
            "type": "string",
            "format": "string",
            "example": "Test description"
          },
          "number_of_steps": {
            "type": "integer",
            "format": "int32"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Step"
            },
            "example": []
          },
          "creation_date": {
            "type": "string",
            "format": "date-time"
          },
          "published": {
            "type": "boolean",
            "format": "boolean",
            "example": false
          },
          "closed": {
            "type": "boolean",
            "format": "boolean",
            "example": false
          }
        }
      },
      "Step": {
        "type": "object",
        "required": ["name", "type", "duration"],
        "properties": {
          "step_id": {
            "type": "string",
            "format": "string"
          },
          "test_id": {
            "type": "string",
            "format": "string"
          },
          "name": {
            "type": "string",
            "format": "string",
            "example": "First Questionnaire"
          },
          "type": {
            "type": "string",
            "format": "string",
            "example": "question"
          },
          "stressor": {
            "type": "string",
            "format": "string",
            "example": "arithmetic"
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "example": 30
          },
          "content": {
            "type": "object"
          }
        }
      },
      "Session": {
        "type": "object",
        "required": ["session_id", "test_id"],
        "properties": {
          "session_id": {
            "type": "string",
            "format": "string",
            "example": "12345"
          },
          "test_id": {
            "type": "string",
            "format": "string"
          },
          "consent": {
            "type": "boolean",
            "format": "boolean"
          },
          "responses": {
            "type": "array",
            "example": []
          },
          "creation_date": {
            "type": "string",
            "format": "date-time"
          },
          "close_date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Session_Step": {
        "type": "object",
        "required": ["step_id", "content", "start_time", "end_time"],
        "properties": {
          "step_id": {
            "type": "string",
            "format": "string"
          },
          "content": {
            "type": "object",
            "example": {}
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}
